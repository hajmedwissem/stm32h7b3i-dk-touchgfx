/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGSVIEWBASE_HPP
#define SETTINGSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_screen/settingsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class settingsViewBase : public touchgfx::View<settingsPresenter>
{
public:
    settingsViewBase();
    virtual ~settingsViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void hum_funct(int value)
    {
        // Override and implement this function in settings
    }
    virtual void co2_func(int value)
    {
        // Override and implement this function in settings
    }
    virtual void pump_manuel_func(int value)
    {
        // Override and implement this function in settings
    }
    virtual void fun_manuel_func(int value)
    {
        // Override and implement this function in settings
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScrollableContainer settings_Cont;
    touchgfx::ScalableImage page_bg;
    touchgfx::Container auto_settings_container;
    touchgfx::Slider CO2_slider;
    touchgfx::Slider humidity_slider;
    touchgfx::TextArea CO2_threshold;
    touchgfx::TextArea humidity_threshold;
    touchgfx::TextArea auto_settings;
    touchgfx::TextAreaWithOneWildcard hum_val_display;
    touchgfx::TextAreaWithOneWildcard co2_val_display;
    touchgfx::TextArea auto_text;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  back_pb;
    touchgfx::TextArea manuel_text;
    touchgfx::Line line1;
    touchgfx::PainterRGB888 line1Painter;
    touchgfx::Container manuel_settings_container;
    touchgfx::Container pump_settings_cont;
    touchgfx::Slider pump_control_slider;
    touchgfx::TextAreaWithOneWildcard pump_val_display;
    touchgfx::Container fun_settings_cont;
    touchgfx::Slider fun_control_slider;
    touchgfx::TextAreaWithOneWildcard fun_val_display;
    touchgfx::ToggleButton fun_Button;
    touchgfx::ToggleButton pump_Button;
    touchgfx::TextArea pump_control;
    touchgfx::TextArea fun_control;
    touchgfx::TextArea manuel_settings;
    touchgfx::ToggleButton auto_manuel_pb;
    touchgfx::TextArea settings_page;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HUM_VAL_DISPLAY_SIZE = 5;
    touchgfx::Unicode::UnicodeChar hum_val_displayBuffer[HUM_VAL_DISPLAY_SIZE];
    static const uint16_t CO2_VAL_DISPLAY_SIZE = 5;
    touchgfx::Unicode::UnicodeChar co2_val_displayBuffer[CO2_VAL_DISPLAY_SIZE];
    static const uint16_t PUMP_VAL_DISPLAY_SIZE = 5;
    touchgfx::Unicode::UnicodeChar pump_val_displayBuffer[PUMP_VAL_DISPLAY_SIZE];
    static const uint16_t FUN_VAL_DISPLAY_SIZE = 5;
    touchgfx::Unicode::UnicodeChar fun_val_displayBuffer[FUN_VAL_DISPLAY_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<settingsViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<settingsViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<settingsViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void display_manuel_setting(bool show);
	void display_auto_setting(bool show);
	void display_pump_settings(bool show);
	void display_fun_settings(bool show);

};

#endif // SETTINGSVIEWBASE_HPP
