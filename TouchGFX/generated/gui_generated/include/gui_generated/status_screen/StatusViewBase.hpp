/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef STATUSVIEWBASE_HPP
#define STATUSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/status_screen/StatusPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndClear.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndOverwrite.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class StatusViewBase : public touchgfx::View<StatusPresenter>
{
public:
    StatusViewBase();
    virtual ~StatusViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void sliderValueChanged(int value)
    {
        // Override and implement this function in Status
    }
    virtual void co2sliderchange(int value)
    {
        // Override and implement this function in Status
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScrollableContainer status_Cont;
    touchgfx::ScalableImage page_bg;
    touchgfx::Container CO2_cont;
    touchgfx::BoxWithBorder co2_bg;
    touchgfx::GraphWrapAndClear<100> co2_graph;
    touchgfx::GraphElementGridY co2_graphMajorYAxisGrid;
    touchgfx::GraphLabelsX co2_graphMajorXAxisLabel;
    touchgfx::GraphLabelsY co2_graphMajorYAxisLabel;
    touchgfx::GraphElementLine co2_graphLine1;
    touchgfx::PainterRGB888 co2_graphLine1Painter;
    touchgfx::Slider co2_slider;
    touchgfx::TextArea co2_title;
    touchgfx::Container humd_cont;
    touchgfx::BoxWithBorder humdit_bg;
    touchgfx::GraphWrapAndOverwrite<100> humd_graph;
    touchgfx::GraphElementGridY humd_graphMajorYAxisGrid;
    touchgfx::GraphLabelsX humd_graphMajorXAxisLabel;
    touchgfx::GraphLabelsY humd_graphMajorYAxisLabel;
    touchgfx::GraphElementLine humd_graphLine1;
    touchgfx::PainterRGB888 humd_graphLine1Painter;
    touchgfx::TextArea hum_graph_title;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::Slider hum_slider;
    touchgfx::TextArea monotoring_page;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  back_pb;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<StatusViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<StatusViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // STATUSVIEWBASE_HPP
